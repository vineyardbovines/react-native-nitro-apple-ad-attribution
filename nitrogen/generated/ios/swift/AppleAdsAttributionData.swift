///
/// AppleAdsAttributionData.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `AppleAdsAttributionData`, backed by a C++ struct.
 */
public typealias AppleAdsAttributionData = margelo.nitro.nitroappleadattribution.AppleAdsAttributionData

public extension AppleAdsAttributionData {
  private typealias bridge = margelo.nitro.nitroappleadattribution.bridge.swift

  /**
   * Create a new instance of `AppleAdsAttributionData`.
   */
  init(attribution: Bool, orgId: Double, campaignId: Double, conversionType: String, clickDate: String?, adGroupId: Double, countryOrRegion: String, keywordId: Double, adId: Double) {
    self.init(attribution, orgId, campaignId, std.string(conversionType), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = clickDate {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), adGroupId, std.string(countryOrRegion), keywordId, adId)
  }

  var attribution: Bool {
    @inline(__always)
    get {
      return self.__attribution
    }
    @inline(__always)
    set {
      self.__attribution = newValue
    }
  }
  
  var orgId: Double {
    @inline(__always)
    get {
      return self.__orgId
    }
    @inline(__always)
    set {
      self.__orgId = newValue
    }
  }
  
  var campaignId: Double {
    @inline(__always)
    get {
      return self.__campaignId
    }
    @inline(__always)
    set {
      self.__campaignId = newValue
    }
  }
  
  var conversionType: String {
    @inline(__always)
    get {
      return String(self.__conversionType)
    }
    @inline(__always)
    set {
      self.__conversionType = std.string(newValue)
    }
  }
  
  var clickDate: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__clickDate.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__clickDate = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var adGroupId: Double {
    @inline(__always)
    get {
      return self.__adGroupId
    }
    @inline(__always)
    set {
      self.__adGroupId = newValue
    }
  }
  
  var countryOrRegion: String {
    @inline(__always)
    get {
      return String(self.__countryOrRegion)
    }
    @inline(__always)
    set {
      self.__countryOrRegion = std.string(newValue)
    }
  }
  
  var keywordId: Double {
    @inline(__always)
    get {
      return self.__keywordId
    }
    @inline(__always)
    set {
      self.__keywordId = newValue
    }
  }
  
  var adId: Double {
    @inline(__always)
    get {
      return self.__adId
    }
    @inline(__always)
    set {
      self.__adId = newValue
    }
  }
}
